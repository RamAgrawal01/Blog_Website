{"ast":null,"code":"import { createContext, useState } from \"react\";\nimport { baseUrl } from \"../baseUrl\";\n\n// Step1\nexport const AppContext = /*#__PURE__*/createContext();\nfunction AppContextProvider(_ref) {\n  let {\n    children\n  } = _ref;\n  /*const [loading, setLoading] = useState(false);\r\n  const [posts, setPosts] = useState([])\r\n  const [page, setPage] = useState(1)\r\n  const [totalPages, setTotalPages] = useState(null);\r\n    // Data Filling\r\n  async function fetchBlogPosts(page = 1) {\r\n      setLoading(true)\r\n      let url = `${baseUrl}?page=${page}`;\r\n      console.log(\"printing final url\")\r\n      // console.log(url);\r\n      try {\r\n          const result = await fetch(url);\r\n          const data = await result.json();\r\n          console.log(data)\r\n          setPage(data.page);\r\n          setPosts(data.posts);\r\n          setTotalPages(data.totalPages);\r\n   }  \r\n      catch (e) {\r\n          console.log(\"Error\")\r\n          setPage(1);\r\n          setPosts([]);\r\n          setTotalPages(null);\r\n  }\r\n      setLoading(false);\r\n  }\r\n  \r\n  function handlerPageChange(page) {\r\n      setPage(page);\r\n      fetchBlogPosts(page);\r\n  }\r\n  \r\n      const value = {\r\n      posts,\r\n      setPosts,\r\n      page,\r\n      setPage,\r\n      totalPages,\r\n      setTotalPages,\r\n      loading,\r\n      setLoading,\r\n      handlerPageChange,\r\n      fetchBlogPosts,\r\n  };\r\n    return <AppContext.Provider value={value}>\r\n      {children}\r\n  </AppContext.Provider>*/\n  return null;\n}\n_c = AppContextProvider;\nexport default AppContextProvider;\nvar _c;\n$RefreshReg$(_c, \"AppContextProvider\");","map":{"version":3,"names":["createContext","useState","baseUrl","AppContext","AppContextProvider","_ref","children","_c","$RefreshReg$"],"sources":["C:/WEb development/New folder/react_advance/blog/src/context/AppContext.js"],"sourcesContent":["import { createContext, useState } from \"react\";\r\nimport { baseUrl } from \"../baseUrl\";\r\n\r\n// Step1\r\nexport const AppContext = createContext();\r\n\r\nfunction AppContextProvider({ children }) {\r\n    /*const [loading, setLoading] = useState(false);\r\n    const [posts, setPosts] = useState([])\r\n    const [page, setPage] = useState(1)\r\n    const [totalPages, setTotalPages] = useState(null);\r\n\r\n    // Data Filling\r\n    async function fetchBlogPosts(page = 1) {\r\n        setLoading(true)\r\n        let url = `${baseUrl}?page=${page}`;\r\n        console.log(\"printing final url\")\r\n        // console.log(url);\r\n        try {\r\n            const result = await fetch(url);\r\n            const data = await result.json();\r\n            console.log(data)\r\n            setPage(data.page);\r\n            setPosts(data.posts);\r\n            setTotalPages(data.totalPages);\r\n     }  \r\n        catch (e) {\r\n            console.log(\"Error\")\r\n            setPage(1);\r\n            setPosts([]);\r\n            setTotalPages(null);\r\n    }\r\n        setLoading(false);\r\n    }\r\n\r\n\r\n\r\n    function handlerPageChange(page) {\r\n        setPage(page);\r\n        fetchBlogPosts(page);\r\n    }\r\n    \r\n\r\n\r\n    const value = {\r\n        posts,\r\n        setPosts,\r\n        page,\r\n        setPage,\r\n        totalPages,\r\n        setTotalPages,\r\n        loading,\r\n        setLoading,\r\n        handlerPageChange,\r\n        fetchBlogPosts,\r\n    };\r\n\r\n    return <AppContext.Provider value={value}>\r\n        {children}\r\n    </AppContext.Provider>*/\r\n    return null;\r\n}\r\n\r\nexport default AppContextProvider;"],"mappings":"AAAA,SAASA,aAAa,EAAEC,QAAQ,QAAQ,OAAO;AAC/C,SAASC,OAAO,QAAQ,YAAY;;AAEpC;AACA,OAAO,MAAMC,UAAU,gBAAGH,aAAa,EAAE;AAEzC,SAASI,kBAAkBA,CAAAC,IAAA,EAAe;EAAA,IAAd;IAAEC;EAAS,CAAC,GAAAD,IAAA;EACpC;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EAOI,OAAO,IAAI;AACf;AAACE,EAAA,GAvDQH,kBAAkB;AAyD3B,eAAeA,kBAAkB;AAAC,IAAAG,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}